name: Build the Docker Image

on:
  workflow_call:
    secrets:
      AWS_REGION:
        required: true
      AWS_ROLE_ARN:
        required: true
    inputs:
      package_name:
        description: "The name of the python package"
        required: true
        type: string
      image_name:
        description: "Name of the docker image to build"
        required: false
        type: string
        default: ${{ github.event.repository.name }}
      test_image:
        description: "Runs the image test if true"
        required: false
        type: boolean
        default: false
    
permissions:
  contents: read
  id-token: write

jobs:
  check_file:
    runs-on: ubuntu-latest
    outputs:
      dockerfile_exists: ${{ steps.check-file.outputs.file_exists}}
    steps:
      - name: Clone the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check file existence
        id: check-file
        run: |
          if [ -f "Dockerfile" ]; then
            file_exists="true"
          else
            file_exists="false"
          fi
          echo "file_exists=${file_exists}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [check_file]
    if: ${{ needs.check_file.outputs.dockerfile_exists }} == "true"
    steps:
      # Building image
      - name: Clone the repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .
      - name: Get package version
        run: |
          version=$(python -c "import ${{ inputs.package_name}}; print(${{ inputs.package_name}}.__version__)")
          echo "PACKAGE_VERSION=$version" >> $GITHUB_ENV
      - name: Build image name
        id: build-docker-image
        run: |
          IMAGE_NAME=${{ inputs.image_name }}:${PACKAGE_VERSION}

          echo "IMAGE_NAME: ${IMAGE_NAME}"
          docker build -t $IMAGE_NAME .

          echo "image_name=${IMAGE_NAME}" >> $GITHUB_OUTPUT
      
      # Testing image
      - name: Run Docker Image
        if: ${{ inputs.test_image == true }}
        run: docker run --name test-container -d ${{ env.image_name }}
      - name: Check container is running
        if: ${{ inputs.test_image == true }}
        run: sleep 5 && docker ps -a
      - name: Check if container has exited already
        if: ${{ inputs.test_image == true }}
        run: |
          if docker ps -a | grep -q "Exited"; then
            echo "Container exited. probably broken"
            exit 1
          else
            echo "Container still running, should be okay."
          fi
      - name: Stop and remove container
        if: ${{ inputs.test_image == true }}
        run: |
          docker stop test-container
          docker rm test-container

      # Deployment
      - name: Configure AWS credentials
        if: ${{ github.ref_name == 'main' || github.head_ref == 'main'}}
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        if: ${{ github.ref_name == 'main' || github.head_ref == 'main'}}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Push image
        if: ${{ github.ref_name == 'main' || github.head_ref == 'main'}}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          image_name=${{ steps.build-docker-image.outputs.image_name }}
          full_image_name="${ECR_REGISTRY}/${image_name}"
          docker image tag $image_name $full_image_name
          docker push $full_image_name